#!/usr/bin/env bash

set -e
set -o pipefail

VERSION="0.0.5"

DEP_ERR=100

#https://stackoverflow.com/a/33297950
function check_dep {
    local dep="$1"
    if command -v "$dep" >/dev/null 2>&1 ; then
        return 0
    else
        return "$DEP_ERR"
    fi
}

function script_echo {
    echo "[night.zig]" "$1"
}

function check_deps {
    local deps=("curl" "jq" "basename" "tar" "find" "readlink")
    for dep in "${deps[@]}"; do
        if check_dep "$dep"; then
            :
        else
            script_echo "Dependency \"$dep\" is not installed. Exiting now..."
            exit "$DEP_ERR"
        fi
    done
}

function arch_info {
    local arch
    local uname_m
    uname_m="$(uname -m)"
    if [[ "$uname_m" == "arm64" ]]; then
        arch="aarch64"
    elif [[ "$uname_m" == "amd64" ]]; then
        arch="x86_64"
    elif [[ "$uname_m" == "x86_64" ]]; then
        arch="x86_64"
    elif [[ "$uname_m" == "i386" ]]; then
        arch="x86"
    elif [[ "$uname_m" == "riscv64" ]]; then
        arch="riscv64"
    elif [[ "$uname_m" == "powerpc" ]]; then
        arch="powerpc"
    elif [[ "$uname_m" == "ppc64el" ]]; then
        arch="powerpc64le"
    else
        arch="unknown"
    fi
    echo "$arch"
}

# https://stackoverflow.com/a/8597411
function os_info {
    local os
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        os="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        os="macos"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        # POSIX compatibility layer and Linux environment emulation for Windows
        os="windows"
    elif [[ "$OSTYPE" == "msys" ]]; then
        # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
        os="windows"
    elif [[ "$OSTYPE" == "win32" ]]; then
        # I'm not sure this can happen.
        os="windows"
    elif [[ "$OSTYPE" == "freebsd"* ]]; then
        os="unknown"
    else
        os="unknown"
    fi
    echo "$os"
}

# works for both macOS and linux
# https://unix.stackexchange.com/a/84980
function mktempdir {
    mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir'
}

ARCH_OS_ERR=101

function fetch_tar {
    local arch_os="$(arch_info)-$(os_info)"
    if [[ "$arch_os" == *"unknown"* ]]; then
        script_echo "No prebuilt binary for $arch_os. Exiting..."
        exit "$ARCH_OS_ERR"
    fi
    local tar_url="$(curl "https://ziglang.org/download/index.json" | jq -r ".master.\"$arch_os\".tarball")"
    local tar_name="$(basename "$tar_url")"
    local temp_dir="$(mktempdir)"

    curl --output-dir "$temp_dir" --output "$tar_name" "$tar_url"

    echo "$temp_dir/$tar_name"
}

NZ_DIR="$HOME/.night.zig"

function unpack_tar {
    local tar_path="$1"
    mkdir -p "$NZ_DIR"

    local containing_dir="$(tar -tf "$tar_path" | head -1)"
    local new_install_dir_name="${containing_dir%/}"
    tar -xf "$tar_path" -C "$NZ_DIR"
    echo "$new_install_dir_name"
}

function config_latest {
    local new_install_dir_name="$1"
    (
        cd "$NZ_DIR"
        rm -f latest
        ln -s "$new_install_dir_name" latest
    )
}

function path_needs_config {
    local path=$1
    if [[ "$PATH" == *"$path"* ]]; then
        return 1
    else
        return 0
    fi
}

function config_path {
    local path=$1
    echo ""
    script_echo "Put this in your shell's profile file:"
    script_echo "export PATH=${path}:\$PATH"
    echo ""
}

function config_path_if_necessary {
    local path=$1
    if path_needs_config "$path"; then
        config_path "$path"
    else
        :
    fi
}

function deploy_nightly {
    local tar_path="$(fetch_tar)"

    local new_install_dir_name="$(unpack_tar "$tar_path")"

    config_latest "$new_install_dir_name"

    config_path_if_necessary "$NZ_DIR"/latest
}

function deploy_nz {
    # I know it's confusing naming
    # so the full path of `nz` is:
    # ~/.night.zig/nz/nz
    local nz_dir="$NZ_DIR"/nz
    mkdir -p "$nz_dir"
    rm -f "$nz_dir/nz"
    curl --output-dir "$nz_dir" --output "nz" "https://raw.githubusercontent.com/jsomedon/night.zig/main/nz"
    chmod +x "$nz_dir"/nz

    config_path_if_necessary "$nz_dir"
}

function rm_outdated_nightly {
    (
        cd "$HOME/.night.zig"
        local to_be_removed=$(find "." -maxdepth 1 ! -name "nz" ! -name "latest" ! -name "$(basename "$(readlink -f latest)")" ! -name ".")
        for tbr in $to_be_removed; do
            echo "removing $HOME/.night.zig/$(basename "$tbr")..."
            rm -rf "$tbr"
        done
    )
}

function show_version {
    script_echo "version $VERSION"
}

function show_help {
    show_version
    echo ""
    echo "USAGE:"
    echo "    nz <SUBCOMMAND>"
    echo ""
    echo "SUBCOMMANDS:"
    echo "    update            Update both zig nightly toolchain & nz itself"
    echo "    update nightly    Update zig nightly toolchain only"
    echo "    update nz         Update nz itself only"
    echo "    cleanup           Remove outdated nightly toolchains"
    echo "    version           Show nz version info"
    echo "    help              Show this message"
}

function main {
    check_deps

    if [[ $# -eq 0 ]]; then
        show_help
    elif [[ $1 == "update" ]]; then
        if [[ $# -eq 1 ]]; then
            deploy_nightly
            deploy_nz
        elif [[ $# -eq 2 ]]; then
            if [[ $2 == "nightly" ]]; then
                deploy_nightly
            elif [[ $2 == "nz" ]]; then
                deploy_nz
            else
                show_help
            fi
        else
            show_help
        fi
    elif [[ $1 == "cleanup" ]]; then
        rm_outdated_nightly
    elif [[ $1 == "version" ]]; then
        show_version
    else
        show_help
    fi
}

main "$@"
